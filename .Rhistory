points (ffs[,1],ffs[,5],pch=16,col=3)
points (ffs[,1],ffs[,6],pch=16,col=4)
points (ffs[,1],ffs[,6],pch=16,col=5)
head (ffs)
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,yaxs='i',type='n')
points (ffs[,1],ffs[,2],pch=16,col=1)
points (ffs[,1],ffs[,3],pch=16,col=2)
points (ffs[,1],ffs[,4],pch=16,col=3)
points (ffs[,1],ffs[,5],pch=16,col=4)
points (ffs[,1],ffs[,6],pch=16,col=5)
plot (ffs[,1],ffs[,1],ylim=c(10,max(ffs)+100),pch=16,yaxs='i',type='n')
points (ffs[,1],ffs[,2],pch=16,col=1)
points (ffs[,1],ffs[,3],pch=16,col=2)
points (ffs[,1],ffs[,4],pch=16,col=3)
points (ffs[,1],ffs[,5],pch=16,col=4)
points (ffs[,1],ffs[,6],pch=16,col=5)
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)),pch=16,type='n')
points (ffs[ffs[,1]!=0,2],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,1]!=0,3],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,1]!=0,4],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,1]!=0,5],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,1]!=0,6],ffs[ffs[,6]!=0,6],pch=16,col=5)
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)),pch=16,type='n')
points (ffs[ffs[,2]!=0,2],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,3],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,4],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,5],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,6],ffs[ffs[,6]!=0,6],pch=16,col=5)
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)),pch=16,type='n')
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)),pch=16,type='n')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5)
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,type='n')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5)
identify
?identify
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,type='n')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5)
times
freqs
nf
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,type='n')
plot (times[nf==1],ffs[nf==1])
plot (times[nf==1],freqs[nf==1])
?identify
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,type='n')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5)
locator (n=1)
coord = locator (n=1)
coord
which.min(ffs[,1]-coord$x)
ffs[,1]
coord$x
which.min(ffs[,1]-coord$x)
ffs[,1]-coord$x
which.min(abs(ffs[,1]-coord$x))
row
rw = which.min(abs(ffs[,1]-coord$x))
which.min(abs(ffs[rw,]-coord$y))
cl = which.min(abs(ffs[rw,]-coord$y))
cl
ffs[rw,cl]
cat ('(d)elete    (q)uit')
cat ('\\n Options:    (d)elete    (q)uit')
cat ('\n Options:    (d)elete    (q)uit')
cat ('\n           Options:    (d)elete    (q)uit')
cat ('\n         Options:    (d)elete    (q)uit   \n')
cat ('\n      Options:    (d)elete    (q)uit   \n')
scan (1, what=character())
?scan
scan (n=1, what=character())
cat ('\n      Options:    (d)elete    (q)uit   \n')
selection = scan (n=1, what=character())
cat ('\nSelection: ', selection)
cat ('\n    How many?  \n')
selection = scan (n=1, what=numeric())
selection = '-'
while (selection!='q'){
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,type='n',yaxs='i')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5)
cat ('\n      Options:    (d)elete    (q)uit   \n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
}
#save incrementally
}
plotffs = function (ffs){
par (mfrow = c(1,1), mar = c(4,4,1,1))
plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,type='n',yaxs='i')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5)
}
selection = '-'
while (selection!='q'){
plotffs (ffs)
cat ('\n      Options:    (d)elete    (q)uit   \n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs)
}
#save incrementally
}
fn = scan (n=1, what=numeric(),quiet=TRUE)
fn
num
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
rw
cl
fn
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
rw
cl
ffs[rw,fn]
ffs[rw,
]
ffs[rw,fn]
fn
ffs[rw,fn]
cl
ffs[rw,cl]
plotffs (ffs)
coord
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
rw
fn
ffs[rw,fn+1]
ffs[rw,cl]
ffs[rw,fn+1] = ffs[rw,cl]
ffs[rw,cl] = 0
plotffs (ffs)
while (selection!='q'){
plotffs (ffs)
cat ('\n      Options:    (d)elete    (q)uit   (r)eassign    \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,fn+1] = ffs[rw,cl]
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
#save incrementally
}
selection = '-'
while (selection!='q'){
plotffs (ffs)
cat ('\n      Options:    (d)elete    (q)uit   (r)eassign    \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,fn+1] = ffs[rw,cl]
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
#save incrementally
}
rw = which.min(abs(ffs[,1]-coord$x))
rw
which.min(abs(ffs[,1]-coord$x))
while (selection!='q'){
plotffs (ffs)
cat ('\n      Options:    (d)elete    (q)uit   (r)eassign    \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
#rw = which.min(abs(ffs[,1]-coord$x))
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,fn+1] = ffs[rw,cl]
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
#save incrementally
}
abs(ffs[,1]-coord$x)*abs(ffs[rw,]-coord$y)
abs(ffs[,1]-coord$x)
head (ffs)
coord$x
coord
ffs
abs(ffs[,1]-coord$x)
abs(ffs[,-1]-coord$y)
abs(ffs[,1]-coord$x)
matrix(abs(ffs[,1]-coord$x),col=5)
?matrix
matrix(abs(ffs[,1]-coord$x),ncol=5)
abs(ffs[,1]-coord$x)
matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5)
(matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y))
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
dists
which.min(dists)
which.min(unlist(dists))
ffs
which.min(unlist(dists))
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
dists
apply (dists, 2, min)
order(apply (dists, 2, min))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
rw
selection = '-'
while (selection!='q'){
plotffs (ffs)
cat ('\n      Options:    (d)elete    (q)uit   (r)eassign    \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
#rw = which.min(abs(ffs[,1]-coord$x))
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1] = ffs[rw,cl]
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
#save incrementally
}
fn
ffs
fn
cl
rw
q
q = selectCutoff (14, sound, rows = 2, color = 'alternate')
ffs = q$ffs[[1]]
ffs
while (selection!='q'){
plotffs (ffs)
cat ('\n      Options:    (d)elete    (q)uit   (r)eassign    \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
#rw = which.min(abs(ffs[,1]-coord$x))
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1] = ffs[rw,cl]
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
#save incrementally
}
selection = '-'
while (selection!='q'){
plotffs (ffs)
cat ('\n      Options:    (d)elete    (q)uit   (r)eassign    \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
#rw = which.min(abs(ffs[,1]-coord$x))
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1] = ffs[rw,cl]
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
#save incrementally
}
ffs = q$ffs[[1]]
plotffs (ffs)
coord = locator (n=1)
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1]
fn
fn+1
rw
ffs[rw,fn+1]
ffs[rw,
]
abline (v=235)
ffs[rw,cl]
cl
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
cl
apply (dists, 2, min)
rw = which.min(dists[,cl])
ffs[rw,fn+1]
ffs[rw,cl]
cl
fn
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1] = ffs[rw,cl+1]
ffs[rw,cl+1] = 0
plotffs (ffs)
ffs = q$ffs[[1]]
selection = '-'
while (selection!='q'){
plotffs (ffs)
cat ('\n      Options:    (d)elete    (q)uit   (r)eassign    \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection)
if (selection == 'd'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
#rw = which.min(abs(ffs[,1]-coord$x))
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1] = ffs[rw,cl+1]
ffs[rw,cl+1] = 0
plotffs (ffs)
save(ffs,file='fixffs_tmp.rda')
}
#save incrementally
}
plotffs = function (ffs, spect = FALSE){
par (mfrow = c(1,1), mar = c(4,4,1,1))
if (spect)spectrogram (sound, colors = color, quality = FALSE, fs = fs,timestep=-200,maxfreq=cutoff)
if (!spect) plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,type='n',yaxs='i')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5)
}
plotffs (ffs,spect=TRUE)
plotffs = function (ffs, spect = FALSE){
par (mfrow = c(1,1), mar = c(4,4,1,1))
if (spect)spectrogram (sound, colors = color, quality = FALSE, fs = fs,timestep=-200,maxfreq=max(ffs)+100)
if (!spect) plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+100),pch=16,type='n',yaxs='i')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5)
}
plotffs (ffs,spect=TRUE)
