points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,cex=2,col='white')
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,cex=2,col='white')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1,cex=1.3)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2,cex=1.3)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3,cex=1.3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4,cex=1.3)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5,cex=1.3)
}
editFormants (ffs$ffs[[2]], sound, csv, row=2)
editFormants = function (ffs, sound = NULL, csv = NULL, row = 1){
### delete, reassign formant.
selection = 'd'
usespect = FALSE; add = FALSE;
par (mfrow = c(1,1), mar = c(4,4,1,1))
if (!is.null(sound) & !is.null(ffs) & !is.null(csv)){
par(mfrow = c(2,1), oma = c(4,4,1,1) + 0.1, mar = c(.2,.2,.2,.2) + 0.1)
layout (mat = (c(1,2)),heights = c(.5,1))
span = (csv[row,5]*sound$fs):(csv[row,6]*sound$fs)
tmp = sound$sound[span]
spect = spectrogram (tmp,fs=sound$fs,show=FALSE,maxfreq=max(ffs+300), color = 'alternate')
add = TRUE
pitch = pitchtrack (tmp,fs=sound$fs,show=FALSE)
power = powertrack (tmp,fs=sound$fs,show=FALSE)
usespect = TRUE
}
while (selection%in%c('d','r','z')){
if (usespect){
plot (pitch[,1],pitch[,2], type='b',col=4,pch=16,xlim=c(0,1000*length(tmp)/sound$fs),
ylim = c(0,300),xaxt='n',yaxt='n',xaxs='i')
pow = (power[,2] - min(power[,2])) / abs(min(power[,2])) * 290
points (power[,1], pow, type='b',col=2,pch=16,xlim=c(0,1000*length(tmp)/sound$fs))
plot (spect)
mtext (side=1,text = 'Time (ms)',line=2.2)
}
plotffs (ffs,add=add)
cat ('\n      Options:    (d)elete    (r)eassign    (z)oom     (q)uit  \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection, ' \n\n')
if (selection == 'd'){
cat ('\n    How many?   (0 for box)  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
if(num>0)for (i in 1:num){
coord = locator (n=1)
if (coord$y<0) break
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
plotffs (ffs,add=add)
save(ffs,file='fixffs_tmp.rda')
}
if (num==0){
coord = locator (n=2)
if (coord$y[1]<0 | coord$y[2]<0) break
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=5)
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=1,border='white')
cat ('\n  Look good?   (y)es    (n)o    \n\n')
choice = scan (n=1, what=character(),quiet=TRUE)
if (choice=='y'){
rw = (ffs[,1]>coord$x[1]) & (ffs[,1]<coord$x[2])
cl = (ffs[,-1]>coord$y[1]) & (ffs[,-1]<coord$y[2])
for (i in 1:nrow(ffs)) cl[i,] = cl[i,]*rw[i]
cl = cbind (0, cl)
ffs[cl==1] = 0
plotffs (ffs,add=add)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
if (coord$y<0) break
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1] = ffs[rw,cl+1]
ffs[rw,cl+1] = 0
plotffs (ffs,add=add)
save(ffs,file='fixffs_tmp.rda')
}
if (selection == 'z'){
cat ('\n    Click new start and end:  \n\n')
coord = locator (n=2)
if (coord$y[1]<0 | coord$y[2]<0) break
abline (v = coord$y,lwd=5)
abline (v = coord$y,lwd=1,col='white')
cat ('\n  Look good?   (y)es    (n)o    \n\n')
choice = scan (n=1, what=character(),quiet=TRUE)
if (choice=='y'){
use = coord$x[1]<ffs[,1] & coord$x[2]>ffs[,1]
ffs = ffs[use,]
plotffs (ffs,add=add)
save(ffs,file='fixffs_tmp.rda')
}
save(ffs,file='fixffs_tmp.rda')
ffs
}
plotffs = function (ffs, add = FALSE){
if (!add) plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+500),pch=16,type='n',yaxs='i')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,cex=2,col='white')
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,cex=2,col='white')
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,cex=2,col='white')
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,cex=2,col='white')
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,cex=2,col='white')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1,cex=1.3)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2,cex=1.3)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3,cex=1.3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4,cex=1.3)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5,cex=1.3)
}
editFormants (ffs$ffs[[2]], sound, csv, row=2)
ffsarc = list()
ffsarc = c(ffsarc,ffs)
ffs
ffsarc = list()
ffsarc = c(ffsarc,ffs$ffs[[1]])
ffsarc
ffsarc = list(original=ffs$ffs[[1]])
ffsarc
ffsarc = c(ffsarc,ffs$ffs[[1]])
ffsarc
ffsarc = list(original=ffs$ffs[[1]])
length(ffsarc)
################################################################
#### PARAMETERS
#ffs - dataframe containing formant tracks
#sound - sound file if you want a spectrogram
#csv - csv data if you want a spectrogram
#row - row number(s) interested in editing if you want a spectrogram
################################################################
editFormants = function (ffs, sound = NULL, csv = NULL, row = 1){
### delete, reassign formant.
selection = 'd'
usespect = FALSE; add = FALSE;
par (mfrow = c(1,1), mar = c(4,4,1,1))
if (!is.null(sound) & !is.null(ffs) & !is.null(csv)){
par(mfrow = c(2,1), oma = c(4,4,1,1) + 0.1, mar = c(.2,.2,.2,.2) + 0.1)
layout (mat = (c(1,2)),heights = c(.5,1))
span = (csv[row,5]*sound$fs):(csv[row,6]*sound$fs)
tmp = sound$sound[span]
spect = spectrogram (tmp,fs=sound$fs,show=FALSE,maxfreq=max(ffs+300), color = 'alternate')
add = TRUE
pitch = pitchtrack (tmp,fs=sound$fs,show=FALSE)
power = powertrack (tmp,fs=sound$fs,show=FALSE)
usespect = TRUE
}
ffsarc = list(original=ffs)
while (selection%in%c('d','r','z')){
if (usespect){
plot (pitch[,1],pitch[,2], type='b',col=4,pch=16,xlim=c(0,1000*length(tmp)/sound$fs),
ylim = c(0,300),xaxt='n',yaxt='n',xaxs='i')
pow = (power[,2] - min(power[,2])) / abs(min(power[,2])) * 290
points (power[,1], pow, type='b',col=2,pch=16,xlim=c(0,1000*length(tmp)/sound$fs))
plot (spect)
mtext (side=1,text = 'Time (ms)',line=2.2)
}
plotffs (ffs,add=add)
cat ('\n      Options:    (d)elete    (r)eassign    (z)oom     (q)uit  \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection, ' \n\n')
if (selection == 'd'){
cat ('\n    How many?   (0 for box)  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
if(num>0)for (i in 1:num){
coord = locator (n=1)
if (coord$y<0) break
rw = which.min(abs(ffs[,1]-coord$x))
cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
if (num==0){
coord = locator (n=2)
if (coord$y[1]<0 | coord$y[2]<0) break
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=5)
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=1,border='white')
cat ('\n  Look good?   (y)es    (n)o    \n\n')
choice = scan (n=1, what=character(),quiet=TRUE)
if (choice=='y'){
rw = (ffs[,1]>coord$x[1]) & (ffs[,1]<coord$x[2])
cl = (ffs[,-1]>coord$y[1]) & (ffs[,-1]<coord$y[2])
for (i in 1:nrow(ffs)) cl[i,] = cl[i,]*rw[i]
cl = cbind (0, cl)
ffs[cl==1] = 0
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
if (selection == 'r'){
cat ('\n    How many?  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
for (i in 1:num){
coord = locator (n=1)
if (coord$y<0) break
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1] = ffs[rw,cl+1]
ffs[rw,cl+1] = 0
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
if (selection == 'z'){
cat ('\n    Click new start and end:  \n\n')
coord = locator (n=2)
if (coord$y[1]<0 | coord$y[2]<0) break
abline (v = coord$y,lwd=5)
abline (v = coord$y,lwd=1,col='white')
cat ('\n  Look good?   (y)es    (n)o    \n\n')
choice = scan (n=1, what=character(),quiet=TRUE)
if (choice=='y'){
use = coord$x[1]<ffs[,1] & coord$x[2]>ffs[,1]
ffs = ffs[use,]
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
save(ffs,file='fixffs_tmp.rda')
ffs
}
plotffs = function (ffs, add = FALSE){
if (!add) plot (ffs[,1],ffs[,1],ylim=c(0,max(ffs)+500),pch=16,type='n',yaxs='i')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,cex=2,col='white')
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,cex=2,col='white')
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,cex=2,col='white')
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,cex=2,col='white')
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,cex=2,col='white')
points (ffs[ffs[,2]!=0,1],ffs[ffs[,2]!=0,2],pch=16,col=1,cex=1.3)
points (ffs[ffs[,3]!=0,1],ffs[ffs[,3]!=0,3],pch=16,col=2,cex=1.3)
points (ffs[ffs[,4]!=0,1],ffs[ffs[,4]!=0,4],pch=16,col=3,cex=1.3)
points (ffs[ffs[,5]!=0,1],ffs[ffs[,5]!=0,5],pch=16,col=4,cex=1.3)
points (ffs[ffs[,6]!=0,1],ffs[ffs[,6]!=0,6],pch=16,col=5,cex=1.3)
}
editFormants (ffs$ffs[[2]], sound, csv, row=2)
load ('fixffsarc.rda')
head (ffsarc)
plotffs (ffsarc[[1]])
plotffs (ffsarc[[2]])
par (mfrow = c(3,1), mar = c(4,4,1,1))
plotffs (ffsarc[[1]])
plotffs (ffsarc[[2]])
plotffs (ffsarc[[3]])
par (mfrow = c(3,1), mar = c(4,4,1,1))
plotffs (ffsarc[[1]])
plotffs (ffsarc[[2]])
plotffs (ffsarc[[3]])
ffs = selectCutoff (sound, csv, rows = 1:2, color = 'alternate', makepng = TRUE, speaker = 14)
library (phonTools)
source ('tracking/formanttrack.R')
source ('tracking/selectCutoff.R')
source ('tracking/editFormants.R')
# paths
files = list.files('csvs', full.name = TRUE)
sound = loadsound ('../14_22050.wav')   #change to local sound file path
csv = read.csv ('csvs/14.csv')
ffs = selectCutoff (sound, csv, rows = 2, color = 'alternate')
editFormants (ffs$ffs[[2]])
editFormants (ffs$ffs[[1]])
editFormants (ffs$ffs[[1]], sound, csv, row=2)
csv
sound
selection = 'd'
usespect = FALSE; add = FALSE;
par (mfrow = c(1,1), mar = c(4,4,1,1))
par(mfrow = c(2,1), oma = c(4,4,1,1) + 0.1, mar = c(.2,.2,.2,.2) + 0.1)
layout (mat = (c(1,2)),heights = c(.5,1))
span = (csv[row,5]*sound$fs):(csv[row,6]*sound$fs)
tmp = sound$sound[span]
spect = spectrogram (tmp,fs=sound$fs,show=FALSE,maxfreq=max(ffs+300), color = 'alternate')
add = TRUE
pitch = pitchtrack (tmp,fs=sound$fs,show=FALSE)
power = powertrack (tmp,fs=sound$fs,show=FALSE)
csv
row = 1
par(mfrow = c(2,1), oma = c(4,4,1,1) + 0.1, mar = c(.2,.2,.2,.2) + 0.1)
layout (mat = (c(1,2)),heights = c(.5,1))
span = (csv[row,5]*sound$fs):(csv[row,6]*sound$fs)
tmp = sound$sound[span]
spect = spectrogram (tmp,fs=sound$fs,show=FALSE,maxfreq=max(ffs+300), color = 'alternate')
add = TRUE
ffs
################################################################
selectCutoff = function (sound, csv, rows = NULL, cutoffs = c(4000,7000),color='alternate',
windowlength=25, makepng = FALSE, size=c(1200,600), speaker = 0){
source ('tracking/formanttrack.R')
if (is.null(rows)) rows = 1:nrow(csv)
fs = sound$fs
cutoffs = seq(cutoffs[1],cutoffs[2],length.out=6)
if (makepng){
for (j in rows){
span = (csv[j,5]*fs):(csv[j,6]*fs)
tmp = sound$sound[span]
png (file = paste(speaker,'-',j,'.png',sep=''), width=size[1],height=size[2])
par (mfrow = c(2,3), mar = c(4,4,1,1))
for (i in 1:6){
formanttrack (tmp, timestep = 3, windowlength=windowlength,cutoff=cutoffs[i],color=color)
}
dev.off() # this one is tricky
}
if (!makepng){
best = NULL
ffs = list()
count = 1
for (j in rows){
span = (csv[j,5]*fs):(csv[j,6]*fs)
tmp = sound$sound[span]
par (mfrow = c(2,3), mar = c(4,4,1,1))
tffs = list()
for (i in 1:6){
tffs[[i]] = formanttrack (tmp, timestep = 5, windowlength=windowlength,cutoff=cutoffs[i],color=color)
}
tmp = scan (what=character(), n=1,quiet = TRUE)
if (!(tmp %in% c('1','2','3','4','5','6'))) stop ('User Exit')
tmp = as.numeric (tmp)
best[count] = tmp
ffs[[count]] = tffs[[tmp]]
count = count+1
}
output = list (ffs = ffs, cutoff = cutoffs[best])
output
}
ffs = selectCutoff (sound, csv, rows = 2, color = 'alternate')
editFormants (ffs$ffs[[1]])
coord = locator (n=2)
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=5)
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=1,border='white')
rw = (ffs[,1]>coord$x[1]) & (ffs[,1]<coord$x[2])
cl = (ffs[,-1]>coord$y[1]) & (ffs[,-1]<coord$y[2])
q = ffs
ffs = ffs$ffs
rw = (ffs[,1]>coord$x[1]) & (ffs[,1]<coord$x[2])
cl = (ffs[,-1]>coord$y[1]) & (ffs[,-1]<coord$y[2])
ffs
ffs = ffs$ffs[[1]]
ffs
ffs = q$ffs[[1]]
ffs
rw = (ffs[,1]>coord$x[1]) & (ffs[,1]<coord$x[2])
cl = (ffs[,-1]>coord$y[1]) & (ffs[,-1]<coord$y[2])
for (i in 1:nrow(ffs)) cl[i,] = cl[i,]*rw[i]
cl = cbind (0, cl)
cl
ffs[cl==1]
ffs[rw,fn+1]
fn=2
ffs[rw,fn+1]
ffs[rw,fn+1] = ffs[cl==1]
ffs[cl==1]
ffs[rw,fn+1]
ffs[rw,fn+1] = ffs[cl==1]
ffs[rw,fn+1]
ffs[cl==1]
ffs[rw,fn+1]
rw
ffs[cl==1]
ffs[rw,fn+1]
rw
cl
ffs[cl==1]
cl
i=42
i
cl[i,]
ffs[i,cl[i,]==1]
tmp
tmp = ffs[cl==1]
tmp
################################################################
#### PARAMETERS
#ffs - dataframe containing formant tracks
#sound - sound file if you want a spectrogram
#csv - csv data if you want a spectrogram
#row - row number(s) interested in editing if you want a spectrogram
################################################################
editFormants = function (ffs, sound = NULL, csv = NULL, row = 1){
### delete, reassign formant.
selection = 'd'
usespect = FALSE; add = FALSE;
par (mfrow = c(1,1), mar = c(4,4,1,1))
if (!is.null(sound) & !is.null(ffs) & !is.null(csv)){
par(mfrow = c(2,1), oma = c(4,4,1,1) + 0.1, mar = c(.2,.2,.2,.2) + 0.1)
layout (mat = (c(1,2)),heights = c(.5,1))
span = (csv[row,5]*sound$fs):(csv[row,6]*sound$fs)
tmp = sound$sound[span]
spect = spectrogram (tmp,fs=sound$fs,show=FALSE,maxfreq=max(ffs+300), color = 'alternate')
add = TRUE
pitch = pitchtrack (tmp,fs=sound$fs,show=FALSE)
power = powertrack (tmp,fs=sound$fs,show=FALSE)
usespect = TRUE
}
ffsarc = list(original=ffs)
while (selection%in%c('d','r','z')){
if (usespect){
plot (pitch[,1],pitch[,2], type='b',col=4,pch=16,xlim=c(0,1000*length(tmp)/sound$fs),
ylim = c(0,300),xaxt='n',yaxt='n',xaxs='i')
pow = (power[,2] - min(power[,2])) / abs(min(power[,2])) * 290
points (power[,1], pow, type='b',col=2,pch=16,xlim=c(0,1000*length(tmp)/sound$fs))
plot (spect)
mtext (side=1,text = 'Time (ms)',line=2.2)
}
plotffs (ffs,add=add)
cat ('\n      Options:    (d)elete    (r)eassign    (z)oom     (q)uit  \n\n')
selection = scan (n=1, what=character(),quiet=TRUE)
cat ('\nSelection: ', selection, ' \n\n')
if (selection == 'd'){
cat ('\n    How many?   (0 for box)  \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
if(num>0)for (i in 1:num){
coord = locator (n=1)
if (coord$y<0) break
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
#rw = which.min(abs(ffs[,1]-coord$x))
#cl = which.min(abs(ffs[rw,]-coord$y))
ffs[rw,cl] = 0
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
if (num==0){
coord = locator (n=2)
if (coord$y[1]<0 | coord$y[2]<0) break
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=5)
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=1,border='white')
cat ('\n  Look good?   (y)es    (n)o    \n\n')
choice = scan (n=1, what=character(),quiet=TRUE)
if (choice=='y'){
rw = (ffs[,1]>coord$x[1]) & (ffs[,1]<coord$x[2])
cl = (ffs[,-1]>coord$y[1]) & (ffs[,-1]<coord$y[2])
for (i in 1:nrow(ffs)) cl[i,] = cl[i,]*rw[i]
cl = cbind (0, cl)
ffs[cl==1] = 0
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
if (selection == 'r'){
cat ('\n    How many?     (0 for box)   \n\n')
num = scan (n=1, what=numeric(),quiet=TRUE)
cat ('\n    Too which formant?  \n\n')
fn = scan (n=1, what=numeric(),quiet=TRUE)
if(num>0)for (i in 1:num){
coord = locator (n=1)
if (coord$y<0) break
dists = log((matrix(rep(abs(ffs[,1]-coord$x),5),ncol=5) * abs(ffs[,-1]-coord$y)))
cl = order(apply (dists, 2, min))[1]
rw = which.min(dists[,cl])
ffs[rw,fn+1] = ffs[rw,cl+1]
ffs[rw,cl+1] = 0
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
if (num==0){
coord = locator (n=2)
if (coord$y[1]<0 | coord$y[2]<0) break
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=5)
rect (coord$x[1],coord$y[1],coord$x[2],coord$y[2],lwd=1,border='white')
cat ('\n  Look good?   (y)es    (n)o    \n\n')
choice = scan (n=1, what=character(),quiet=TRUE)
if (choice=='y'){
rw = (ffs[,1]>coord$x[1]) & (ffs[,1]<coord$x[2])
cl = (ffs[,-1]>coord$y[1]) & (ffs[,-1]<coord$y[2])
for (i in 1:nrow(ffs)) cl[i,] = cl[i,]*rw[i]
cl = cbind (0, cl)
for (i in 1:rnow(cl))
if (sum(cl[i,])>0) ffs[i,fn+1] = ffs[i,cl[i,]==1]
ffs[cl==1] = 0
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
if (selection == 'z'){
cat ('\n    Click new start and end:  \n\n')
coord = locator (n=2)
if (coord$y[1]<0 | coord$y[2]<0) break
abline (v = coord$y,lwd=5)
abline (v = coord$y,lwd=1,col='white')
cat ('\n  Look good?   (y)es    (n)o    \n\n')
choice = scan (n=1, what=character(),quiet=TRUE)
if (choice=='y'){
use = coord$x[1]<ffs[,1] & coord$x[2]>ffs[,1]
ffs = ffs[use,]
ll = length(ffsarc)
ffsarc[[ll+1]] = ffs
plotffs (ffs,add=add)
save(ffsarc,file='fixffsarc.rda')
}
save(ffsarc,file='fixffsarc.rda')
ffs
}
editFormants (ffs$ffs[[1]])
ffs = q
editFormants (ffs$ffs[[1]])
source ('tracking/editFormants.R')
editFormants (ffs$ffs[[1]])
